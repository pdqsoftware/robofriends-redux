{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","robot","index","SearchBox","props","type","placeholder","onChange","searchChange","Scroll","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_TEXT","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchText","onSearchTextChange","isPending","filteredRobots","filter","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","actionType","console","log","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a55ff415.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({ id, name, email }) => {\r\n    // const { id, name, email } = props\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots' />\r\n            <div>\r\n                <h2>{ name }</h2>\r\n                <p>{ email }</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((robot, index) => {\r\n                    return (\r\n                        <Card \r\n                            key = { robot.id }\r\n                            id = { robot.id }\r\n                            name = { robot.name }\r\n                            email = { robot.email }\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList\r\n\r\n// const CardList = (props) => {\r\n//     const { robots } = props\r\n//     const robotCard = robots.map((robot, index) => {\r\n//         return (\r\n//             <Card \r\n//                 key = { robot.id }\r\n//                 id = { robot.id }\r\n//                 name = { robot.name }\r\n//                 email = { robot.email }\r\n//             />\r\n//         )\r\n//     });\r\n\r\n//     return (\r\n//         <div>\r\n//             { robotCard }\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default CardList","import React from 'react'\r\n\r\nconst SearchBox = (props) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='Search robots'\r\n                onChange={ props.searchChange }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style = {{ overflow: 'scroll', border: '2px solid black', height: '600px' }}>\r\n            { props.children }\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default Scroll","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        // This lifecycle method runs when an error occurs - check documentation\r\n        this.setState(() => ({ hasError: true }))\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            // Report the error\r\n            return <h1>Oooops! An unknown error has occured!</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","export const CHANGE_SEARCH_TEXT = 'CHANGE_SEARCH_TEXT'\r\n\r\n\r\n\r\n// Promise\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\n\r\n// Import the actions required by this component\r\nimport { setSearchText, requestRobots } from '../actions'\r\n// import { requestRobots } from '../reducers'\r\n\r\n// This links the pieces of state that are relevant to the App (in this case) component\r\n// and should be listened for by sending them down as props\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        // state . reducer . state element\r\n        searchText: state.searchRobots.searchText,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n// Normally the searchText: line above would read:\r\n// searchText: state.searchRobots.searchText\r\n// But in this case we only have one reducer (at the top level) so it is not required making 'state.searchText' work OK\r\n\r\n\r\n// Lists the actions that will be required by App (in this case) and dispatches them\r\n// as props\r\n// setSearchText() is defined in actions.js - and sets event.target.value into \r\n// the state field of searchText, as defined by the reducer\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchTextChange: (event) => dispatch(setSearchText(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n    // constructor() {\r\n    //     super()\r\n    //     this.state = {\r\n    //         robots: []\r\n    //         // searchText: ''\r\n    //     }\r\n    // }\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots()\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     fetch('https://jsonplaceholder.typicode.com/users')\r\n    //         .then(response=> {\r\n    //             return response.json()\r\n    //         })\r\n    //         .then(users => {\r\n    //             this.setState(() => ({\r\n    //                 robots: users\r\n    //             }))\r\n    //         })\r\n    // }\r\n\r\n    // handleSearchTextChange = (event) => {\r\n    //     this.setState(() => ({ searchText: event.target.value}))\r\n    // }\r\n\r\n    render () {\r\n        // const { robots  } = this.state\r\n        const { searchText, onSearchTextChange, robots, isPending } = this.props\r\n        const filteredRobots = robots.filter((robot) => {\r\n            return robot.name.toLowerCase().includes(searchText.toLowerCase())\r\n        })\r\n            \r\n        if (isPending) {\r\n            return <h3>Loading...</h3>\r\n        } else {\r\n            return (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends - Redux version</h1>\r\n                    <SearchBox searchChange = { onSearchTextChange } />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots = { filteredRobots } />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n// Redux standards recommend the following two parameters for connect() are named thus:\r\n// (Which state changes should I listen to, which actions should I listen for)\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import  {\r\n    CHANGE_SEARCH_TEXT,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nexport const setSearchText = (text) => ({\r\n    type: CHANGE_SEARCH_TEXT,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({\r\n        type: REQUEST_ROBOTS_PENDING\r\n    })\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response=> {\r\n                return response.json()\r\n            })\r\n            .then(data => dispatch({\r\n                type: REQUEST_ROBOTS_SUCCESS,\r\n                payload: data\r\n            }))\r\n            .catch(error => dispatch({\r\n                type: REQUEST_ROBOTS_FAILED,\r\n                payload: error\r\n            }))\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import  {\r\n    CHANGE_SEARCH_TEXT,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\n// Set the initial state of redux 'state'\r\nconst initialState = {\r\n    searchText: ''\r\n}\r\n\r\n// This is the reducer function - called searchRobots - which is what it does!\r\nexport const searchRobots = (state = initialState, action = {}) => {\r\n    // console.log(`action.type: ${action}.type`)\r\n    const actionType = action.type\r\n    console.log(`action.type: ${actionType}`)\r\n\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_TEXT:\r\n            return Object.assign({}, state, { searchText: action.payload })\r\n        default:\r\n            console.log('default case selected!')\r\n            return state\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state , { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload , isPending: false })\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n// Import from Redux modules\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\n\nimport thunkMiddleware from 'redux-thunk'\n\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nimport { searchRobots, requestRobots } from './reducers';\n\n// Create the logger\nconst logger = createLogger()\n\n\n// Create a root reducer\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\n// Create the store\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n// const store = createStore(searchRobots, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = { store }>\n        <App />\n    </Provider>\n  </React.StrictMode>, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}